use crate::{substrate, Api};
use sp_keyring::AccountKeyring;
use subxt::tx::PairSigner;

pub async fn send_signed_tampered_price(api: Api) -> Result<(), Box<dyn std::error::Error>> {
	let price = 10;

	let alice_signer = PairSigner::new(AccountKeyring::Alice.pair());

	let call = substrate::tx().ocw_example().submit_price(10);

	let mut previous_finalized_block_n = -1;
	loop {
		let last_finalized_block_hash = api.rpc().finalized_head().await?;
		let last_finalized_block = api.rpc().block(Some(last_finalized_block_hash)).await?.unwrap();
		let last_finalized_block_n = last_finalized_block.block.header.number;

		// time to submit signed? (1 per block)
		if previous_finalized_block_n < last_finalized_block_n as i32 {
			let tx_hash = api.tx().sign_and_submit_default(&call, &alice_signer).await?;
			log::info!(
				"submitted an signed tx with tampered BTC/USD price of {}: {}",
				price,
				tx_hash
			);
			previous_finalized_block_n = last_finalized_block_n as i32;
		}
	}
}
