use prices::log_price_average;
use signed::send_signed_tampered_price;
use subxt::{OnlineClient, PolkadotConfig};
use unsigned::send_unsigned_tampered_price;

#[subxt::subxt(runtime_metadata_path = "metadata.scale")]
pub mod substrate {}

mod prices;
mod signed;
mod unsigned;

pub type Api = OnlineClient<PolkadotConfig>;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
	env_logger::init_from_env(
		env_logger::Env::default().filter_or(env_logger::DEFAULT_FILTER_ENV, "info"),
	);

	let api = OnlineClient::<PolkadotConfig>::new().await?;

	let unsigned_t = send_unsigned_tampered_price(api.clone());
	let signed_t = send_signed_tampered_price(api.clone());
	let prices_t = log_price_average(api);

	let (unsigned_r, signed_r, prices_r) = tokio::join!(unsigned_t, signed_t, prices_t);

	unsigned_r.unwrap();
	signed_r.unwrap();
	prices_r.unwrap();

	Ok(())
}
